{"ast":null,"code":"import _slicedToArray from \"F:\\\\Ecommerce_recommendation_system\\\\Ecom_rec_system\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"F:\\\\Ecommerce_recommendation_system\\\\Ecom_rec_system\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"F:\\\\Ecommerce_recommendation_system\\\\Ecom_rec_system\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"F:\\\\Ecommerce_recommendation_system\\\\Ecom_rec_system\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\Ecommerce_recommendation_system\\\\Ecom_rec_system\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark($fc36f9a046a9ce79$export$cfc14088dfefce5f);\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { useState as $8D3nr$useState, useMemo as $8D3nr$useMemo, useEffect as $8D3nr$useEffect, useCallback as $8D3nr$useCallback } from \"react\";\nimport { useLayoutEffect as $8D3nr$useLayoutEffect } from \"@react-aria/utils\";\nimport $8D3nr$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nvar $c74cda7d31af1253$export$c84671f46d6a1ca = /*#__PURE__*/function () {\n  function $c74cda7d31af1253$export$c84671f46d6a1ca() {\n    _classCallCheck(this, $c74cda7d31af1253$export$c84671f46d6a1ca);\n  }\n  _createClass($c74cda7d31af1253$export$c84671f46d6a1ca, [{\n    key: \"shouldInvalidate\",\n    /**\n    * Returns whether the layout should invalidate in response to\n    * visible rectangle changes. By default, it only invalidates\n    * when the collection view's size changes. Return true always\n    * to make the layout invalidate while scrolling (e.g. sticky headers).\n    */\n    value: function shouldInvalidate(newRect, oldRect) {\n      // By default, invalidate when the size changes\n      return newRect.width !== oldRect.width || newRect.height !== oldRect.height;\n    }\n    /**\n    * This method allows the layout to perform any pre-computation\n    * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n    * Called by the collection view before {@link getVisibleLayoutInfos}\n    * or {@link getLayoutInfo} are called.\n    */\n  }, {\n    key: \"validate\",\n    value: function validate(invalidationContext) {}\n    /**\n    * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n    * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n    * @param point The point at which the drag occurred.\n    */\n    // getDragTarget(point: Point): DragTarget | null {\n    //   let target = this.virtualizer.keyAtPoint(point);\n    //   if (!target) {\n    //     return null;\n    //   }\n    //   return {\n    //     type: 'item',\n    //     key: target\n    //   };\n    // }\n    /**\n    * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n    * to reject the drop. The dropped items will be inserted before the resulting target.\n    * @param point The point at which the drop occurred.\n    */\n    // getDropTarget(point: Point): DropTarget | null {\n    //   return null;\n    // }\n    /**\n    * Returns the starting attributes for an animated insertion.\n    * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n    * The default implementation just returns its input.\n    *\n    * @param layoutInfo The proposed LayoutInfo for this view.\n    */\n  }, {\n    key: \"getInitialLayoutInfo\",\n    value: function getInitialLayoutInfo(layoutInfo) {\n      return layoutInfo;\n    }\n    /**\n    * Returns the ending attributes for an animated removal.\n    * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n    * to the one returned by this method. The default implementation returns its input.\n    *\n    * @param layoutInfo The original LayoutInfo for this view.\n    */\n  }, {\n    key: \"getFinalLayoutInfo\",\n    value: function getFinalLayoutInfo(layoutInfo) {\n      return layoutInfo;\n    }\n  }]);\n  return $c74cda7d31af1253$export$c84671f46d6a1ca;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $d7fd61009c21d0bb$export$7e0eeb9da702a085 = /*#__PURE__*/function () {\n  _createClass($d7fd61009c21d0bb$export$7e0eeb9da702a085, [{\n    key: \"copy\",\n    /**\n    * Returns a copy of the LayoutInfo.\n    */\n    value: function copy() {\n      var res = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());\n      res.estimatedSize = this.estimatedSize;\n      res.opacity = this.opacity;\n      res.transform = this.transform;\n      res.parentKey = this.parentKey;\n      res.isSticky = this.isSticky;\n      res.zIndex = this.zIndex;\n      res.allowOverflow = this.allowOverflow;\n      return res;\n    }\n    /**\n    * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n    * @param key The unique key for this view.\n    * @param rect The rectangle describing the size and position of this view.\n    */\n  }]);\n  function $d7fd61009c21d0bb$export$7e0eeb9da702a085(type, key, rect) {\n    _classCallCheck(this, $d7fd61009c21d0bb$export$7e0eeb9da702a085);\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n  return $d7fd61009c21d0bb$export$7e0eeb9da702a085;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $3041db3296945e6e$export$baf26146a414f24a = /*#__PURE__*/function () {\n  _createClass($3041db3296945e6e$export$baf26146a414f24a, [{\n    key: \"copy\",\n    /**\n    * Returns a copy of this point.\n    */\n    value: function copy() {\n      return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);\n    }\n    /**\n    * Checks if two points are equal.\n    */\n  }, {\n    key: \"equals\",\n    value: function equals(point) {\n      return this.x === point.x && this.y === point.y;\n    }\n    /**\n    * Returns true if this point is the origin.\n    */\n  }, {\n    key: \"isOrigin\",\n    value: function isOrigin() {\n      return this.x === 0 && this.y === 0;\n    }\n  }]);\n  function $3041db3296945e6e$export$baf26146a414f24a() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classCallCheck(this, $3041db3296945e6e$export$baf26146a414f24a);\n    this.x = x;\n    this.y = y;\n  }\n  return $3041db3296945e6e$export$baf26146a414f24a;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $60423f92c7f9ad87$export$c79fc6492f3af13d = /*#__PURE__*/function () {\n  _createClass($60423f92c7f9ad87$export$c79fc6492f3af13d, [{\n    key: \"intersects\",\n    /**\n    * Returns whether this rectangle intersects another rectangle.\n    * @param rect - The rectangle to check.\n    */\n    value: function intersects(rect) {\n      return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n    }\n    /**\n    * Returns whether this rectangle fully contains another rectangle.\n    * @param rect - The rectangle to check.\n    */\n  }, {\n    key: \"containsRect\",\n    value: function containsRect(rect) {\n      return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n    }\n    /**\n    * Returns whether the rectangle contains the given point.\n    * @param point - The point to check.\n    */\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n    }\n    /**\n    * Returns the first corner of this rectangle (from top to bottom, left to right)\n    * that is contained in the given rectangle, or null of the rectangles do not intersect.\n    * @param rect - The rectangle to check.\n    */\n  }, {\n    key: \"getCornerInRect\",\n    value: function getCornerInRect(rect) {\n      for (var _i = 0, _arr = [\"topLeft\", \"topRight\", \"bottomLeft\", \"bottomRight\"]; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n        if (rect.containsPoint(this[key])) return key;\n      }\n      return null;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(rect) {\n      return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n    }\n  }, {\n    key: \"pointEquals\",\n    value: function pointEquals(point) {\n      return this.x === point.x && this.y === point.y;\n    }\n  }, {\n    key: \"sizeEquals\",\n    value: function sizeEquals(size) {\n      return this.width === size.width && this.height === size.height;\n    }\n    /**\n    * Returns the union of this Rect and another.\n    */\n  }, {\n    key: \"union\",\n    value: function union(other) {\n      var x = Math.min(this.x, other.x);\n      var y = Math.min(this.y, other.y);\n      var width = Math.max(this.maxX, other.maxX) - x;\n      var height = Math.max(this.maxY, other.maxY) - y;\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, width, height);\n    }\n    /**\n    * Returns the intersection of this Rect with another.\n    * If the rectangles do not intersect, an all zero Rect is returned.\n    */\n  }, {\n    key: \"intersection\",\n    value: function intersection(other) {\n      if (!this.intersects(other)) return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, 0, 0);\n      var x = Math.max(this.x, other.x);\n      var y = Math.max(this.y, other.y);\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, Math.min(this.maxX, other.maxX) - x, Math.min(this.maxY, other.maxY) - y);\n    }\n    /**\n    * Returns a copy of this rectangle.\n    */\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);\n    }\n  }, {\n    key: \"maxX\",\n    /**\n    * The maximum x-coordinate in the rectangle.\n    */\n    get: function get() {\n      return this.x + this.width;\n    }\n    /**\n    * The maximum y-coordinate in the rectangle.\n    */\n  }, {\n    key: \"maxY\",\n    get: function get() {\n      return this.y + this.height;\n    }\n    /**\n    * The area of the rectangle.\n    */\n  }, {\n    key: \"area\",\n    get: function get() {\n      return this.width * this.height;\n    }\n    /**\n    * The top left corner of the rectangle.\n    */\n  }, {\n    key: \"topLeft\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.y);\n    }\n    /**\n    * The top right corner of the rectangle.\n    */\n  }, {\n    key: \"topRight\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.y);\n    }\n    /**\n    * The bottom left corner of the rectangle.\n    */\n  }, {\n    key: \"bottomLeft\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.x, this.maxY);\n    }\n    /**\n    * The bottom right corner of the rectangle.\n    */\n  }, {\n    key: \"bottomRight\",\n    get: function get() {\n      return new (0, $3041db3296945e6e$export$baf26146a414f24a)(this.maxX, this.maxY);\n    }\n  }]);\n  function $60423f92c7f9ad87$export$c79fc6492f3af13d() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, $60423f92c7f9ad87$export$c79fc6492f3af13d);\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n  return $60423f92c7f9ad87$export$c79fc6492f3af13d;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec = /*#__PURE__*/function () {\n  _createClass($ee1bfa90a957fb8a$export$cb6da89c6af1a8ec, [{\n    key: \"copy\",\n    /**\n    * Returns a copy of this size.\n    */\n    value: function copy() {\n      return new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);\n    }\n    /**\n    * Returns whether this size is equal to another one.\n    */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.width === other.width && this.height === other.height;\n    }\n    /**\n    * The total area of the Size.\n    */\n  }, {\n    key: \"area\",\n    get: function get() {\n      return this.width * this.height;\n    }\n  }]);\n  function $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec() {\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classCallCheck(this, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec);\n    this.width = width;\n    this.height = height;\n  }\n  return $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $ad1d98aa8f0c31b4$var$KEY = 0;\nvar $ad1d98aa8f0c31b4$export$1a5223887c560441 = /*#__PURE__*/function () {\n  _createClass($ad1d98aa8f0c31b4$export$1a5223887c560441, [{\n    key: \"prepareForReuse\",\n    /**\n    * Prepares the view for reuse. Called just before the view is removed from the DOM.\n    */\n    value: function prepareForReuse() {\n      this.content = null;\n      this.rendered = null;\n      this.layoutInfo = null;\n    }\n  }]);\n  function $ad1d98aa8f0c31b4$export$1a5223887c560441(virtualizer) {\n    _classCallCheck(this, $ad1d98aa8f0c31b4$export$1a5223887c560441);\n    this.virtualizer = virtualizer;\n    this.key = ++$ad1d98aa8f0c31b4$var$KEY;\n  }\n  return $ad1d98aa8f0c31b4$export$1a5223887c560441;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n/*\n* Copyright 2020 Adobe. All rights reserved.\n* This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License. You may obtain a copy\n* of the License at http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software distributed under\n* the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n* OF ANY KIND, either express or implied. See the License for the specific language\n* governing permissions and limitations under the License.\n*/\n// use high res timer if available\nvar $3eb131dcf37ad5f8$var$perf = typeof window !== \"undefined\" ? window.performance : null;\n// @ts-ignore\nvar $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);\nvar $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\nvar $3eb131dcf37ad5f8$var$fixTs;\nfunction $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {\n  var canceled = false;\n  var raf_id;\n  var promise = new Promise(function (resolve) {\n    var start = $3eb131dcf37ad5f8$var$getTime();\n    var diffX = end.x - begin.x;\n    var diffY = end.y - begin.y;\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if ($3eb131dcf37ad5f8$var$fixTs == null) $3eb131dcf37ad5f8$var$fixTs = t > 1e12 !== $3eb131dcf37ad5f8$var$getTime() > 1e12;\n      if ($3eb131dcf37ad5f8$var$fixTs) t = $3eb131dcf37ad5f8$var$getTime();\n      // check if we're done\n      var delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        var proceed = fn(new (0, $3041db3296945e6e$export$baf26146a414f24a)(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));\n        if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);\n      }\n    });\n  });\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n  return promise;\n}\nfunction $3eb131dcf37ad5f8$export$77860c106b4a6a2e(t) {\n  return t;\n}\nfunction $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {\n  var res = new Set();\n  var _iterator = _createForOfIteratorHelper(a.keys()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (!b.has(key)) res.add(key);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {\n  var toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);\n  var toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);\n  var toUpdate = new Set();\n  var _iterator2 = _createForOfIteratorHelper(a.keys()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var key = _step2.value;\n      if (b.has(key)) toUpdate.add(key);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return {\n    toRemove: toRemove,\n    toAdd: toAdd,\n    toUpdate: toUpdate\n  };\n}\nfunction $fc36f9a046a9ce79$export$cfc14088dfefce5f() {\n  var _len,\n    iterators,\n    _key,\n    _i2,\n    _iterators,\n    iterator,\n    _args = arguments;\n  return _regeneratorRuntime.wrap(function $fc36f9a046a9ce79$export$cfc14088dfefce5f$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        for (_len = _args.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {\n          iterators[_key] = _args[_key];\n        }\n        _i2 = 0, _iterators = iterators;\n      case 2:\n        if (!(_i2 < _iterators.length)) {\n          _context.next = 8;\n          break;\n        }\n        iterator = _iterators[_i2];\n        return _context.delegateYield(iterator, \"t0\", 5);\n      case 5:\n        _i2++;\n        _context.next = 2;\n        break;\n      case 8:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\nfunction $fc36f9a046a9ce79$export$6897c284b6f9f4dc(object) {\n  var res = {};\n  for (var key in object) res[object[key]] = key;\n  return res;\n}\nfunction $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {\n  if (a === b) return true;\n  if (a.size !== b.size) return false;\n  var _iterator3 = _createForOfIteratorHelper(a),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var key = _step3.value;\n      if (!b.has(key)) return false;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return true;\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $364191b3decf3697$var$RollingAverage = /*#__PURE__*/function () {\n  _createClass($364191b3decf3697$var$RollingAverage, [{\n    key: \"addSample\",\n    value: function addSample(sample) {\n      this.count++;\n      this.value += (sample - this.value) / this.count;\n    }\n  }]);\n  function $364191b3decf3697$var$RollingAverage() {\n    _classCallCheck(this, $364191b3decf3697$var$RollingAverage);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"count\", 0);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"value\", 0);\n  }\n  return $364191b3decf3697$var$RollingAverage;\n}();\nvar $364191b3decf3697$export$4455ee6afb38dcbb = /*#__PURE__*/function () {\n  _createClass($364191b3decf3697$export$4455ee6afb38dcbb, [{\n    key: \"setVisibleRect\",\n    value: function setVisibleRect(rect) {\n      var time = performance.now() - this.startTime;\n      if (time < 500) {\n        this.averageTime.addSample(time);\n        if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;\n        if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n      this.startTime = performance.now();\n      this.visibleRect = rect;\n    }\n  }, {\n    key: \"collectMetrics\",\n    value: function collectMetrics() {\n      var time = performance.now() - this.startTime;\n      if (time < 500) this.averagePerf.addSample(time);\n      if (this.visibleRect.height > 0) {\n        var o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));\n        this.overscanY.addSample(o);\n      }\n      if (this.visibleRect.width > 0) {\n        var o1 = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));\n        this.overscanX.addSample(o1);\n      }\n    }\n  }, {\n    key: \"getOverscannedRect\",\n    value: function getOverscannedRect() {\n      var overscanned = this.visibleRect.copy();\n      var overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n      if (this.velocity.y > 0) {\n        overscanned.y -= overscanY * 0.2;\n        overscanned.height += overscanY + overscanY * 0.2;\n      } else {\n        overscanned.y -= overscanY;\n        overscanned.height += overscanY + overscanY * 0.2;\n      }\n      var overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n      if (this.velocity.x > 0) {\n        overscanned.x -= overscanX * 0.2;\n        overscanned.width += overscanX + overscanX * 0.2;\n      } else {\n        overscanned.x -= overscanX;\n        overscanned.width += overscanX + overscanX * 0.2;\n      }\n      return overscanned;\n    }\n  }]);\n  function $364191b3decf3697$export$4455ee6afb38dcbb() {\n    _classCallCheck(this, $364191b3decf3697$export$4455ee6afb38dcbb);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"startTime\", 0);\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"averagePerf\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"averageTime\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"velocity\", new (0, $3041db3296945e6e$export$baf26146a414f24a)(5, 5));\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"overscanX\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"overscanY\", new $364191b3decf3697$var$RollingAverage());\n    (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"visibleRect\", new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)());\n  }\n  return $364191b3decf3697$export$4455ee6afb38dcbb;\n}();\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nvar $8e135e531d8dcb66$export$febc5573c75cefb0 = function $8e135e531d8dcb66$export$febc5573c75cefb0() {\n  _classCallCheck(this, $8e135e531d8dcb66$export$febc5573c75cefb0);\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"level\", 0);\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"actions\", []);\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"animated\", true);\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"initialMap\", new Map());\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"finalMap\", new Map());\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"initialLayoutInfo\", new Map());\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"finalLayoutInfo\", new Map());\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"removed\", new Map());\n  (0, $8D3nr$swchelperssrc_define_propertymjs)(this, \"toRemove\", new Map());\n};\nvar $38b9490c1cca8fc4$export$89be5a243e59c4b2 = /*#__PURE__*/function () {\n  _createClass($38b9490c1cca8fc4$export$89be5a243e59c4b2, [{\n    key: \"_setContentSize\",\n    value: function _setContentSize(size) {\n      this._contentSize = size;\n      this.delegate.setContentSize(size);\n    }\n  }, {\n    key: \"_setContentOffset\",\n    value: function _setContentOffset(offset) {\n      var rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n      this.delegate.setVisibleRect(rect);\n    }\n    /**\n    * Get the size of the scrollable content.\n    */\n  }, {\n    key: \"_setVisibleRect\",\n    value: function _setVisibleRect(rect) {\n      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var current = this._visibleRect;\n      // Ignore if the rects are equal\n      if (rect.equals(current)) return;\n      if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);\n      var shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n      this._resetAnimatedContentOffset();\n      this._visibleRect = rect;\n      if (shouldInvalidate) this.relayout({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });else this.updateSubviews(forceUpdate);\n    }\n  }, {\n    key: \"_setData\",\n    value: function _setData(data) {\n      var _this = this;\n      if (data === this._collection) return;\n      if (this._collection) this._runTransaction(function () {\n        _this._collection = data;\n      }, this.transitionDuration > 0);else {\n        this._collection = data;\n        this.reloadData();\n      }\n    }\n    /**\n    * Reloads the data from the data source and relayouts the collection view.\n    * Does not animate any changes. Equivalent to re-assigning the same data source\n    * to the collection view.\n    */\n  }, {\n    key: \"reloadData\",\n    value: function reloadData() {\n      this.relayout({\n        contentChanged: true\n      });\n    }\n    /**\n    * Returns the item with the given key.\n    */\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this._collection ? this._collection.getItem(key) : null;\n    } /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  }, {\n    key: \"isPersistedKey\",\n    /** Returns whether the given key, or an ancestor, is persisted. */value: function isPersistedKey(key) {\n      // Quick check if the key is directly in the set of persisted keys.\n      if (this._persistedKeys.has(key)) return true;\n      // If not, check if the key is an ancestor of any of the persisted keys.\n      var _iterator4 = _createForOfIteratorHelper(this._persistedKeys),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var k = _step4.value;\n          while (k != null) {\n            var layoutInfo = this.layout.getLayoutInfo(k);\n            if (!layoutInfo) break;\n            k = layoutInfo.parentKey;\n            if (k === key) return true;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return false;\n    }\n    /**\n    * Get the collection view's layout.\n    */\n  }, {\n    key: \"setLayout\",\n    /**\n    * Sets the collection view's layout, optionally with an animated transition\n    * from the current layout to the new layout.\n    * @param layout The layout to switch to.\n    * @param animated Whether to animate the layout change.\n    */\n    value: function setLayout(layout) {\n      var _this2 = this;\n      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (layout === this._layout) return;\n      var applyLayout = function applyLayout() {\n        if (_this2._layout)\n          // @ts-ignore\n          _this2._layout.virtualizer = null;\n        layout.virtualizer = _this2;\n        _this2._layout = layout;\n      };\n      if (animated)\n        // Animated layout transitions are really simple, thanks to our transaction support.\n        // We just set the layout inside a transaction action, which runs after the initial\n        // layout infos for the animation are retrieved from the previous layout. Then, the\n        // final layout infos are retrieved from the new layout, and animations occur.\n        this._runTransaction(applyLayout);else {\n        applyLayout();\n        this.relayout();\n      }\n    }\n  }, {\n    key: \"_getReuseType\",\n    value: function _getReuseType(layoutInfo, content) {\n      if (layoutInfo.type === \"item\" && content) {\n        var type = this.delegate.getType ? this.delegate.getType(content) : \"item\";\n        var reuseType = type === \"item\" ? \"item\" : layoutInfo.type + \"_\" + type;\n        return {\n          type: type,\n          reuseType: reuseType\n        };\n      }\n      return {\n        type: layoutInfo.type,\n        reuseType: layoutInfo.type\n      };\n    }\n  }, {\n    key: \"getReusableView\",\n    value: function getReusableView(layoutInfo) {\n      var content = this.getItem(layoutInfo.key);\n      var _this$_getReuseType = this._getReuseType(layoutInfo, content),\n        reuseType = _this$_getReuseType.reuseType;\n      if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];\n      var reusable = this._reusableViews[reuseType];\n      var view = reusable.length > 0 ? reusable.pop() : new (0, $ad1d98aa8f0c31b4$export$1a5223887c560441)(this);\n      view.viewType = reuseType;\n      if (!this._animatedContentOffset.isOrigin()) {\n        layoutInfo = layoutInfo.copy();\n        layoutInfo.rect.x += this._animatedContentOffset.x;\n        layoutInfo.rect.y += this._animatedContentOffset.y;\n      }\n      view.layoutInfo = layoutInfo;\n      this._renderView(view);\n      return view;\n    }\n  }, {\n    key: \"_renderView\",\n    value: function _renderView(reusableView) {\n      var _reusableView$layoutI = reusableView.layoutInfo,\n        type = _reusableView$layoutI.type,\n        key = _reusableView$layoutI.key;\n      reusableView.content = this.getItem(key);\n      reusableView.rendered = this._renderContent(type, reusableView.content);\n    }\n  }, {\n    key: \"_renderContent\",\n    value: function _renderContent(type, content) {\n      var cached = this._renderedContent.get(content);\n      if (cached != null) return cached;\n      var rendered = this.delegate.renderView(type, content);\n      if (content) this._renderedContent.set(content, rendered);\n      return rendered;\n    }\n    /**\n    * Returns an array of all currently visible views, including both\n    * item views and supplementary views.\n    */\n  }, {\n    key: \"getView\",\n    /**\n    * Gets the visible view for the given type and key. Returns null if\n    * the view is not currently visible.\n    *\n    * @param key The key of the view to retrieve.\n    */\n    value: function getView(key) {\n      return this._visibleViews.get(key) || null;\n    }\n    /**\n    * Returns an array of visible views matching the given type.\n    * @param type The view type to find.\n    */\n  }, {\n    key: \"getViewsOfType\",\n    value: function getViewsOfType(type) {\n      return this.visibleViews.filter(function (v) {\n        return v.layoutInfo && v.layoutInfo.type === type;\n      });\n    }\n    /**\n    * Returns the key for the given view. Returns null\n    * if the view is not currently visible.\n    */\n  }, {\n    key: \"keyForView\",\n    value: function keyForView(view) {\n      if (view && view.layoutInfo) return view.layoutInfo.key;\n      return null;\n    }\n    /**\n    * Returns the key for the item view currently at the given point.\n    */\n  }, {\n    key: \"keyAtPoint\",\n    value: function keyAtPoint(point) {\n      var rect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(point.x, point.y, 1, 1);\n      var layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n      // Layout may return multiple layout infos in the case of\n      // persisted keys, so find the first one that actually intersects.\n      var _iterator5 = _createForOfIteratorHelper(layoutInfos),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var layoutInfo = _step5.value;\n          if (layoutInfo.rect.intersects(rect)) return layoutInfo.key;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return null;\n    }\n    /**\n    * Cleanup for when the Virtualizer will be unmounted.\n    */\n  }, {\n    key: \"willUnmount\",\n    value: function willUnmount() {\n      cancelAnimationFrame(this._relayoutRaf);\n    }\n    /**\n    * Triggers a layout invalidation, and updates the visible subviews.\n    */\n  }, {\n    key: \"relayout\",\n    value: function relayout() {\n      var _this3 = this;\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // Ignore relayouts while animating the scroll position\n      if (this._scrollAnimation || typeof requestAnimationFrame === \"undefined\") return;\n      // If we already scheduled a relayout, extend the invalidation\n      // context so we coalesce multiple relayouts in the same frame.\n      if (this._invalidationContext) {\n        Object.assign(this._invalidationContext, context);\n        return;\n      }\n      this._invalidationContext = context;\n      this._relayoutRaf = requestAnimationFrame(function () {\n        _this3._relayoutRaf = null;\n        _this3.relayoutNow();\n      });\n    }\n    /**\n    * Performs a relayout immediately. Prefer {@link relayout} over this method\n    * where possible, since it coalesces multiple layout passes in the same tick.\n    */\n  }, {\n    key: \"relayoutNow\",\n    value: function relayoutNow() {\n      var _this4 = this;\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._invalidationContext || {};\n      // Cancel the scheduled relayout, since we're doing it now.\n      if (this._relayoutRaf) {\n        cancelAnimationFrame(this._relayoutRaf);\n        this._relayoutRaf = null;\n        // Update the provided context with the current invalidationContext since we are cancelling\n        // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n        context = _objectSpread({}, this._invalidationContext, context);\n      }\n      // Reset the invalidation context\n      this._invalidationContext = null;\n      // Do nothing if we don't have a layout or content, or we are\n      // in the middle of an animated scroll transition.\n      if (!this.layout || !this._collection || this._scrollAnimation) return;\n      var scrollAnchor = this._getScrollAnchor();\n      // Trigger the beforeLayout hook, if provided\n      if (typeof context.beforeLayout === \"function\") context.beforeLayout();\n      // Validate the layout\n      this.layout.validate(context);\n      this._setContentSize(this.layout.getContentSize());\n      // Trigger the afterLayout hook, if provided\n      if (typeof context.afterLayout === \"function\") context.afterLayout();\n      // Adjust scroll position based on scroll anchor, and constrain.\n      // If the content changed, scroll to the top.\n      var visibleRect = this.getVisibleRect();\n      var restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n      var contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n      var contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n      contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n      contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n      var hasLayoutUpdates = false;\n      if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n        // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n        // Save the difference between the current and new content offsets, and apply it to the\n        // individual content items instead. At the end of the animation, we'll reset and set the\n        // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n        // the scroll animation and the content animation.\n        if (context.animated || !this._animatedContentOffset.isOrigin()) {\n          this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n          this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n          hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n        } else this._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(contentOffsetX, contentOffsetY));\n      } else hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      // Apply layout infos, unless this is coming from an animated transaction\n      if (!(context.transaction && context.animated)) this._applyLayoutInfos();\n      // Wait for animations, and apply the afterAnimation hook, if provided\n      if (context.animated && hasLayoutUpdates) {\n        this._enableTransitions();\n        var done = function done() {\n          _this4._disableTransitions();\n          // Reset scroll position after animations (see above comment).\n          if (!_this4._animatedContentOffset.isOrigin()) {\n            // Get the content offset to scroll to, taking _animatedContentOffset into account.\n            var _this4$getVisibleRect = _this4.getVisibleRect(),\n              x = _this4$getVisibleRect.x,\n              y = _this4$getVisibleRect.y;\n            _this4._resetAnimatedContentOffset();\n            _this4._setContentOffset(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y));\n          }\n          if (typeof context.afterAnimation === \"function\") context.afterAnimation();\n        };\n        // Sometimes the animation takes slightly longer than expected.\n        setTimeout(done, this.transitionDuration + 100);\n        return;\n      } else if (typeof context.afterAnimation === \"function\") context.afterAnimation();\n    }\n    /**\n    * Corrects DOM order of visible views to match item order of collection.\n    */\n  }, {\n    key: \"_correctItemOrder\",\n    value: function _correctItemOrder() {\n      // Defer until after scrolling and animated transactions are complete\n      if (this._isScrolling || this._transaction) return;\n      var _iterator6 = _createForOfIteratorHelper(this._visibleLayoutInfos.keys()),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var key = _step6.value;\n          var view = this._visibleViews.get(key);\n          this._children.delete(view);\n          this._children.add(view);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"_enableTransitions\",\n    value: function _enableTransitions() {\n      this.delegate.beginAnimations();\n    }\n  }, {\n    key: \"_disableTransitions\",\n    value: function _disableTransitions() {\n      this.delegate.endAnimations();\n    }\n  }, {\n    key: \"_getScrollAnchor\",\n    value: function _getScrollAnchor() {\n      if (!this.anchorScrollPosition) return null;\n      var visibleRect = this.getVisibleRect();\n      // Ask the delegate to provide a scroll anchor, if possible\n      if (this.delegate.getScrollAnchor) {\n        var key = this.delegate.getScrollAnchor(visibleRect);\n        if (key != null) {\n          var layoutInfo = this.layout.getLayoutInfo(key);\n          var corner = layoutInfo.rect.getCornerInRect(visibleRect);\n          if (corner) {\n            var key1 = layoutInfo.key;\n            var offset = layoutInfo.rect[corner].y - visibleRect.y;\n            return {\n              key: key1,\n              layoutInfo: layoutInfo,\n              corner: corner,\n              offset: offset\n            };\n          }\n        }\n      }\n      // No need to anchor the scroll position if it is at the top\n      if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null;\n      // Find a view with a visible corner that has the smallest distance to the top of the collection view\n      var cornerAnchor = null;\n      var _iterator7 = _createForOfIteratorHelper(this._visibleViews),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 2),\n            key2 = _step7$value[0],\n            view = _step7$value[1];\n          var layoutInfo1 = view.layoutInfo;\n          if (layoutInfo1 && layoutInfo1.rect.area > 0) {\n            var corner1 = layoutInfo1.rect.getCornerInRect(visibleRect);\n            if (corner1) {\n              var offset1 = layoutInfo1.rect[corner1].y - visibleRect.y;\n              if (!cornerAnchor || offset1 < cornerAnchor.offset) cornerAnchor = {\n                key: key2,\n                layoutInfo: layoutInfo1,\n                corner: corner1,\n                offset: offset1\n              };\n            }\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return cornerAnchor;\n    }\n  }, {\n    key: \"_restoreScrollAnchor\",\n    value: function _restoreScrollAnchor(scrollAnchor, context) {\n      var contentOffset = this.getVisibleRect();\n      if (scrollAnchor) {\n        var _context_transaction;\n        var finalAnchor = ((_context_transaction = context.transaction) === null || _context_transaction === void 0 ? void 0 : _context_transaction.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n        if (finalAnchor) {\n          var adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;\n          contentOffset.y += adjustment;\n        }\n      }\n      return contentOffset;\n    }\n  }, {\n    key: \"getVisibleRect\",\n    value: function getVisibleRect() {\n      var v = this.visibleRect;\n      var x = v.x - this._animatedContentOffset.x;\n      var y = v.y - this._animatedContentOffset.y;\n      return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(x, y, v.width, v.height);\n    }\n  }, {\n    key: \"getVisibleLayoutInfos\",\n    value: function getVisibleLayoutInfos() {\n      var rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n      this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n      return this._visibleLayoutInfos;\n    }\n  }, {\n    key: \"_getLayoutInfoMap\",\n    value: function _getLayoutInfoMap(rect) {\n      var copy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n      var map = new Map();\n      var _iterator8 = _createForOfIteratorHelper(layoutInfos),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var layoutInfo = _step8.value;\n          if (copy) layoutInfo = layoutInfo.copy();\n          map.set(layoutInfo.key, layoutInfo);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      return map;\n    }\n  }, {\n    key: \"updateSubviews\",\n    value: function updateSubviews() {\n      var _this5 = this;\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this._collection) return;\n      var visibleLayoutInfos = this.getVisibleLayoutInfos();\n      var currentlyVisible = this._visibleViews;\n      var toAdd, toRemove, toUpdate;\n      // If this is a force update, remove and re-add all views.\n      // Otherwise, find and update the diff.\n      if (forceUpdate) {\n        toAdd = visibleLayoutInfos;\n        toRemove = currentlyVisible;\n        toUpdate = new Set();\n      } else {\n        var _ref = (0, $fc36f9a046a9ce79$export$acaf96a27438246b)(currentlyVisible, visibleLayoutInfos);\n        toAdd = _ref.toAdd;\n        toRemove = _ref.toRemove;\n        toUpdate = _ref.toUpdate;\n        var _iterator9 = _createForOfIteratorHelper(toUpdate),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var key = _step9.value;\n            var view = currentlyVisible.get(key);\n            if (!view || !view.layoutInfo) continue;\n            var item = this.getItem(visibleLayoutInfos.get(key).key);\n            if (view.content === item) toUpdate.delete(key);else {\n              // If the view type changes, delete and recreate the view instead of updating\n              var _this$_getReuseType2 = this._getReuseType(view.layoutInfo, item),\n                reuseType = _this$_getReuseType2.reuseType;\n              if (view.viewType !== reuseType) {\n                toUpdate.delete(key);\n                toAdd.add(key);\n                toRemove.add(key);\n              }\n            }\n          }\n          // We are done if the sets are equal\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n        if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n          if (this._transaction) this._applyLayoutInfos();\n          return;\n        }\n      }\n      // Track views that should be removed. They are not removed from\n      // the DOM immediately, since we may reuse and need to re-insert\n      // them back into the DOM anyway.\n      var removed = new Set();\n      var _iterator10 = _createForOfIteratorHelper(toRemove.keys()),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var key1 = _step10.value;\n          var view1 = this._visibleViews.get(key1);\n          if (view1) {\n            removed.add(view1);\n            this._visibleViews.delete(key1);\n            // If we are in the middle of a transaction, wait until the end\n            // of the animations to remove the views from the DOM. Also means\n            // we can't reuse those views immediately.\n            if (this._transaction) this._transaction.toRemove.set(key1, view1);else this.reuseView(view1);\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      var _iterator11 = _createForOfIteratorHelper(toAdd.keys()),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var key2 = _step11.value;\n          var layoutInfo = visibleLayoutInfos.get(key2);\n          var view2 = void 0;\n          // If we're in a transaction, and a layout change happens\n          // during the animations such that a view that was going\n          // to be removed is now not, we don't create a new view\n          // since the old one is still in the DOM, marked as toRemove.\n          if (this._transaction) {\n            // if transaction, get initial layout attributes for the animation\n            if (this._transaction.initialLayoutInfo.has(key2)) layoutInfo = this._transaction.initialLayoutInfo.get(key2);\n            view2 = this._transaction.toRemove.get(key2);\n            if (view2) {\n              this._transaction.toRemove.delete(key2);\n              this._applyLayoutInfo(view2, layoutInfo);\n            }\n          }\n          if (!view2) {\n            // Create or reuse a view for this row\n            view2 = this.getReusableView(layoutInfo);\n            // Add the view to the DOM if needed\n            if (!removed.has(view2)) this._children.add(view2);\n          }\n          this._visibleViews.set(key2, view2);\n          removed.delete(view2);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      var _iterator12 = _createForOfIteratorHelper(toUpdate),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var key3 = _step12.value;\n          var view3 = currentlyVisible.get(key3);\n          this._renderedContent.delete(key3);\n          this._renderView(view3);\n        }\n        // Remove the remaining rows to delete from the DOM\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      if (!this._transaction) this.removeViews(removed);\n      this._correctItemOrder();\n      this._flushVisibleViews();\n      var hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n      if (hasLayoutUpdates) requestAnimationFrame(function () {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (_this5._transaction) requestAnimationFrame(function () {\n          return _this5._applyLayoutInfos();\n        });\n      });\n      return hasLayoutUpdates;\n    }\n  }, {\n    key: \"afterRender\",\n    value: function afterRender() {\n      if (this.shouldOverscan) this._overscanManager.collectMetrics();\n    }\n  }, {\n    key: \"_flushVisibleViews\",\n    value: function _flushVisibleViews() {\n      var _this6 = this;\n      // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n      // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n      // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n      // method to build the final tree.\n      var viewsByParentKey = new Map([[null, []]]);\n      var _iterator13 = _createForOfIteratorHelper(this._children),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var view = _step13.value;\n          var _view_layoutInfo, _viewsByParentKey_get, _view_layoutInfo1, _view_layoutInfo2, _view_layoutInfo3;\n          if (((_view_layoutInfo = view.layoutInfo) === null || _view_layoutInfo === void 0 ? void 0 : _view_layoutInfo.parentKey) != null && !viewsByParentKey.has(view.layoutInfo.parentKey)) viewsByParentKey.set(view.layoutInfo.parentKey, []);\n          (_viewsByParentKey_get = viewsByParentKey.get((_view_layoutInfo1 = view.layoutInfo) === null || _view_layoutInfo1 === void 0 ? void 0 : _view_layoutInfo1.parentKey)) === null || _viewsByParentKey_get === void 0 ? void 0 : _viewsByParentKey_get.push(view);\n          if (!viewsByParentKey.has((_view_layoutInfo2 = view.layoutInfo) === null || _view_layoutInfo2 === void 0 ? void 0 : _view_layoutInfo2.key)) viewsByParentKey.set((_view_layoutInfo3 = view.layoutInfo) === null || _view_layoutInfo3 === void 0 ? void 0 : _view_layoutInfo3.key, []);\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      var buildTree = function buildTree(parent, views) {\n        return views.map(function (view) {\n          var children = viewsByParentKey.get(view.layoutInfo.key);\n          return _this6.delegate.renderWrapper(parent, view, children, function (childViews) {\n            return buildTree(view, childViews);\n          });\n        });\n      };\n      var children = buildTree(null, viewsByParentKey.get(null));\n      this.delegate.setVisibleViews(children);\n    }\n  }, {\n    key: \"_applyLayoutInfo\",\n    value: function _applyLayoutInfo(view, layoutInfo) {\n      if (view.layoutInfo === layoutInfo) return false;\n      view.layoutInfo = layoutInfo;\n      return true;\n    }\n  }, {\n    key: \"_applyLayoutInfos\",\n    value: function _applyLayoutInfos() {\n      var updated = false;\n      // Apply layout infos to visible views\n      var _iterator14 = _createForOfIteratorHelper(this._visibleViews.values()),\n        _step14;\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var view = _step14.value;\n          var cur = view.layoutInfo;\n          if ((cur === null || cur === void 0 ? void 0 : cur.key) != null) {\n            var layoutInfo = this.layout.getLayoutInfo(cur.key);\n            if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n          }\n        }\n        // Apply final layout infos for views that will be removed\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n      if (this._transaction) {\n        var _iterator15 = _createForOfIteratorHelper(this._transaction.toRemove.values()),\n          _step15;\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var view1 = _step15.value;\n            var cur1 = view1.layoutInfo;\n            if ((cur1 === null || cur1 === void 0 ? void 0 : cur1.key) != null) {\n              var layoutInfo1 = this.layout.getLayoutInfo(cur1.key);\n              if (this._applyLayoutInfo(view1, layoutInfo1)) updated = true;\n            }\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n        var _iterator16 = _createForOfIteratorHelper(this._transaction.removed.values()),\n          _step16;\n        try {\n          for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n            var view2 = _step16.value;\n            var cur2 = view2.layoutInfo;\n            var layoutInfo2 = this._transaction.finalLayoutInfo.get(cur2.key) || cur2;\n            layoutInfo2 = this.layout.getFinalLayoutInfo(layoutInfo2.copy());\n            if (this._applyLayoutInfo(view2, layoutInfo2)) updated = true;\n          }\n        } catch (err) {\n          _iterator16.e(err);\n        } finally {\n          _iterator16.f();\n        }\n      }\n      if (updated) this._flushVisibleViews();\n    }\n  }, {\n    key: \"_hasLayoutUpdates\",\n    value: function _hasLayoutUpdates() {\n      if (!this._transaction) return false;\n      var _iterator17 = _createForOfIteratorHelper(this._visibleViews.values()),\n        _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var view = _step17.value;\n          var cur = view.layoutInfo;\n          if (!cur) return true;\n          var layoutInfo = this.layout.getLayoutInfo(cur.key);\n          if (\n          // Uses equals rather than pointEquals so that width/height changes are taken into account\n          !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"reuseView\",\n    value: function reuseView(view) {\n      view.prepareForReuse();\n      this._reusableViews[view.viewType].push(view);\n    }\n  }, {\n    key: \"removeViews\",\n    value: function removeViews(toRemove) {\n      var _iterator18 = _createForOfIteratorHelper(toRemove),\n        _step18;\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var view = _step18.value;\n          this._children.delete(view);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n    }\n  }, {\n    key: \"updateItemSize\",\n    value: function updateItemSize(key, size) {\n      // TODO: we should be able to invalidate a single index path\n      // @ts-ignore\n      if (!this.layout.updateItemSize) return;\n      // If the scroll position is currently animating, add the update\n      // to a queue to be processed after the animation is complete.\n      if (this._scrollAnimation) {\n        this._sizeUpdateQueue.set(key, size);\n        return;\n      }\n      // @ts-ignore\n      var changed = this.layout.updateItemSize(key, size);\n      if (changed) this.relayout();\n    }\n  }, {\n    key: \"startScrolling\",\n    value: function startScrolling() {\n      this._isScrolling = true;\n    }\n  }, {\n    key: \"endScrolling\",\n    value: function endScrolling() {\n      this._isScrolling = false;\n      this._correctItemOrder();\n      this._flushVisibleViews();\n    }\n  }, {\n    key: \"_resetAnimatedContentOffset\",\n    value: function _resetAnimatedContentOffset() {\n      // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n      if (!this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);\n        this._applyLayoutInfos();\n      }\n    }\n    /**\n    * Scrolls the item with the given key into view, optionally with an animation.\n    * @param key The key of the item to scroll into view.\n    * @param duration The duration of the scroll animation.\n    */\n  }, {\n    key: \"scrollToItem\",\n    value: function scrollToItem(key, options) {\n      // key can be 0, so check if null or undefined\n      if (key == null) return;\n      var layoutInfo = this.layout.getLayoutInfo(key);\n      if (!layoutInfo) return;\n      var _options$duration = options.duration,\n        duration = _options$duration === void 0 ? 300 : _options$duration,\n        _options$shouldScroll = options.shouldScrollX,\n        shouldScrollX = _options$shouldScroll === void 0 ? true : _options$shouldScroll,\n        _options$shouldScroll2 = options.shouldScrollY,\n        shouldScrollY = _options$shouldScroll2 === void 0 ? true : _options$shouldScroll2,\n        _options$offsetX = options.offsetX,\n        offsetX = _options$offsetX === void 0 ? 0 : _options$offsetX,\n        _options$offsetY = options.offsetY,\n        offsetY = _options$offsetY === void 0 ? 0 : _options$offsetY;\n      var x = this.visibleRect.x;\n      var y = this.visibleRect.y;\n      var minX = layoutInfo.rect.x - offsetX;\n      var minY = layoutInfo.rect.y - offsetY;\n      var maxX = x + this.visibleRect.width;\n      var maxY = y + this.visibleRect.height;\n      if (shouldScrollX) {\n        if (minX <= x || maxX === 0) x = minX;else if (layoutInfo.rect.maxX > maxX) x += layoutInfo.rect.maxX - maxX;\n      }\n      if (shouldScrollY) {\n        if (minY <= y || maxY === 0) y = minY;else if (layoutInfo.rect.maxY > maxY) y += layoutInfo.rect.maxY - maxY;\n      }\n      return this.scrollTo(new (0, $3041db3296945e6e$export$baf26146a414f24a)(x, y), duration);\n    }\n    /**\n    * Performs an animated scroll to the given offset.\n    * @param offset - The offset to scroll to.\n    * @param duration The duration of the animation.\n    * @returns A promise that resolves when the animation is complete.\n    */\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(offset) {\n      var _this7 = this;\n      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n      // Cancel the current scroll animation\n      if (this._scrollAnimation) {\n        this._scrollAnimation.cancel();\n        this._scrollAnimation = null;\n      }\n      // Set the content offset synchronously if the duration is zero\n      if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n        this._setContentOffset(offset);\n        return Promise.resolve();\n      }\n      this.startScrolling();\n      this._scrollAnimation = (0, $3eb131dcf37ad5f8$export$dc0b63720788090c)(this.visibleRect, offset, duration, (0, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0), function (offset) {\n        _this7._setContentOffset(offset);\n      });\n      this._scrollAnimation.then(function () {\n        _this7._scrollAnimation = null;\n        // Process view size updates that occurred during the animation.\n        // Only views that are still visible will be actually updated.\n        var _iterator19 = _createForOfIteratorHelper(_this7._sizeUpdateQueue),\n          _step19;\n        try {\n          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n            var _step19$value = _slicedToArray(_step19.value, 2),\n              key = _step19$value[0],\n              size = _step19$value[1];\n            _this7.updateItemSize(key, size);\n          }\n        } catch (err) {\n          _iterator19.e(err);\n        } finally {\n          _iterator19.f();\n        }\n        _this7._sizeUpdateQueue.clear();\n        _this7.relayout();\n        _this7._processTransactionQueue();\n        _this7.endScrolling();\n      });\n      return this._scrollAnimation;\n    }\n  }, {\n    key: \"_runTransaction\",\n    value: function _runTransaction(action, animated) {\n      this._startTransaction();\n      if (this._nextTransaction) this._nextTransaction.actions.push(action);\n      this._endTransaction(animated);\n    }\n  }, {\n    key: \"_startTransaction\",\n    value: function _startTransaction() {\n      if (!this._nextTransaction) this._nextTransaction = new (0, $8e135e531d8dcb66$export$febc5573c75cefb0)();\n      this._nextTransaction.level++;\n    }\n  }, {\n    key: \"_endTransaction\",\n    value: function _endTransaction(animated) {\n      if (!this._nextTransaction) return false;\n      // Save whether the transaction should be animated.\n      if (animated != null) this._nextTransaction.animated = animated;\n      // If we haven't reached level 0, we are still in a\n      // nested transaction. Wait for the parent to end.\n      if (--this._nextTransaction.level > 0) return false;\n      // Do nothing for empty transactions\n      if (this._nextTransaction.actions.length === 0) {\n        this._nextTransaction = null;\n        return false;\n      }\n      // Default animations to true\n      if (this._nextTransaction.animated == null) this._nextTransaction.animated = true;\n      // Enqueue the transaction\n      this._transactionQueue.push(this._nextTransaction);\n      this._nextTransaction = null;\n      this._processTransactionQueue();\n      return true;\n    }\n  }, {\n    key: \"_processTransactionQueue\",\n    value: function _processTransactionQueue() {\n      // If the current transaction is animating, wait until the end\n      // to process the next transaction.\n      if (this._transaction || this._scrollAnimation) return;\n      var next = this._transactionQueue.shift();\n      if (next) this._performTransaction(next);\n    }\n  }, {\n    key: \"_getContentRect\",\n    value: function _getContentRect() {\n      return new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)(0, 0, this.contentSize.width, this.contentSize.height);\n    }\n  }, {\n    key: \"_performTransaction\",\n    value: function _performTransaction(transaction) {\n      var _this8 = this;\n      this._transaction = transaction;\n      this.relayoutNow({\n        transaction: transaction,\n        animated: transaction.animated,\n        beforeLayout: function beforeLayout() {\n          // Get the initial layout infos for all views before the updates\n          // so we can figure out which views to add and remove.\n          if (transaction.animated) transaction.initialMap = _this8._getLayoutInfoMap(_this8._getContentRect(), true);\n          // Apply the actions that occurred during this transaction\n          var _iterator20 = _createForOfIteratorHelper(transaction.actions),\n            _step20;\n          try {\n            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n              var action = _step20.value;\n              action();\n            }\n          } catch (err) {\n            _iterator20.e(err);\n          } finally {\n            _iterator20.f();\n          }\n        },\n        afterLayout: function afterLayout() {\n          // Get the final layout infos after the updates\n          if (transaction.animated) {\n            transaction.finalMap = _this8._getLayoutInfoMap(_this8._getContentRect());\n            _this8._setupTransactionAnimations(transaction);\n          } else _this8._transaction = null;\n        },\n        afterAnimation: function afterAnimation() {\n          // Remove and reuse views when animations are done\n          if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n            var _iterator21 = _createForOfIteratorHelper((0, $fc36f9a046a9ce79$export$cfc14088dfefce5f)(transaction.toRemove.values(), transaction.removed.values())),\n              _step21;\n            try {\n              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                var view = _step21.value;\n                _this8._children.delete(view);\n                _this8.reuseView(view);\n              }\n            } catch (err) {\n              _iterator21.e(err);\n            } finally {\n              _iterator21.f();\n            }\n          }\n          _this8._transaction = null;\n          // Ensure DOM order is correct for accessibility after animations are complete\n          _this8._correctItemOrder();\n          _this8._flushVisibleViews();\n          _this8._processTransactionQueue();\n        }\n      });\n    }\n  }, {\n    key: \"_setupTransactionAnimations\",\n    value: function _setupTransactionAnimations(transaction) {\n      var initialMap = transaction.initialMap,\n        finalMap = transaction.finalMap; // Store initial and final layout infos for animations\n      var _iterator22 = _createForOfIteratorHelper(initialMap),\n        _step22;\n      try {\n        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n          var _step22$value = _slicedToArray(_step22.value, 2),\n            key = _step22$value[0],\n            layoutInfo = _step22$value[1];\n          if (finalMap.has(key))\n            // Store the initial layout info for use during animations.\n            transaction.initialLayoutInfo.set(key, layoutInfo);else\n            // This view was removed. Store the layout info for use\n            // in Layout#getFinalLayoutInfo during animations.\n            transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n        }\n        // Get initial layout infos for views that were added\n      } catch (err) {\n        _iterator22.e(err);\n      } finally {\n        _iterator22.f();\n      }\n      var _iterator23 = _createForOfIteratorHelper(finalMap),\n        _step23;\n      try {\n        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n          var _step23$value = _slicedToArray(_step23.value, 2),\n            key1 = _step23$value[0],\n            layoutInfo1 = _step23$value[1];\n          if (!initialMap.has(key1)) {\n            var initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo1.copy());\n            transaction.initialLayoutInfo.set(key1, initialLayoutInfo);\n          }\n        }\n        // Figure out which views were removed.\n      } catch (err) {\n        _iterator23.e(err);\n      } finally {\n        _iterator23.f();\n      }\n      var _iterator24 = _createForOfIteratorHelper(this._visibleViews),\n        _step24;\n      try {\n        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;)\n        // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n        // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n        // added, removed... etc in a loop.\n        {\n          var _step24$value = _slicedToArray(_step24.value, 2),\n            key2 = _step24$value[0],\n            view = _step24$value[1];\n          if (!finalMap.has(key2) && view.layoutInfo.rect.width > 0) {\n            transaction.removed.set(key2, view);\n            this._visibleViews.delete(key2);\n            // In case something weird happened, where we have a view but no\n            // initial layout info, use the one attached to the view.\n            if (view.layoutInfo) {\n              if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator24.e(err);\n      } finally {\n        _iterator24.f();\n      }\n    }\n  }, {\n    key: \"contentSize\",\n    get: function get() {\n      return this._contentSize;\n    }\n    /**\n    * Get the collection view's currently visible rectangle.\n    */\n  }, {\n    key: \"visibleRect\",\n    get: function get() {\n      return this._visibleRect;\n    }\n    /**\n    * Set the collection view's currently visible rectangle.\n    */\n    ,\n    set: function set(rect) {\n      this._setVisibleRect(rect);\n    }\n  }, {\n    key: \"collection\",\n    get: function get() {\n      return this._collection;\n    },\n    set: function set(data) {\n      this._setData(data);\n    }\n  }, {\n    key: \"persistedKeys\",\n    get: function get() {\n      return this._persistedKeys;\n    } /** The set of persisted keys are always present in the DOM, even if not currently in view. */,\n    set: function set(persistedKeys) {\n      if (!(0, $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64)(persistedKeys, this._persistedKeys)) {\n        this._persistedKeys = persistedKeys;\n        this.updateSubviews();\n      }\n    }\n  }, {\n    key: \"layout\",\n    get: function get() {\n      return this._layout;\n    }\n    /**\n    * Set the collection view's layout.\n    */\n    ,\n    set: function set(layout) {\n      this.setLayout(layout);\n    }\n  }, {\n    key: \"visibleViews\",\n    get: function get() {\n      return Array.from(this._visibleViews.values());\n    }\n  }]);\n  function $38b9490c1cca8fc4$export$89be5a243e59c4b2() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, $38b9490c1cca8fc4$export$89be5a243e59c4b2);\n    this._contentSize = new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)();\n    this._visibleRect = new (0, $60423f92c7f9ad87$export$c79fc6492f3af13d)();\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new (0, $364191b3decf3697$export$4455ee6afb38dcbb)();\n    this._persistedKeys = new Set();\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new (0, $3041db3296945e6e$export$baf26146a414f24a)(0, 0);\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n    var _options_transitionDuration;\n    // Set options from passed object if given\n    this.transitionDuration = (_options_transitionDuration = options.transitionDuration) !== null && _options_transitionDuration !== void 0 ? _options_transitionDuration : 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (var _i3 = 0, _arr2 = [\"delegate\", \"size\", \"layout\", \"collection\"]; _i3 < _arr2.length; _i3++) {\n      var key = _arr2[_i3];\n      if (options[key]) this[key] = options[key];\n    }\n  }\n  return $38b9490c1cca8fc4$export$89be5a243e59c4b2;\n}();\nfunction $fc0b13b484ac1194$export$1505db82fe357e65(opts) {\n  var _ref2 = (0, $8D3nr$useState)([]),\n    _ref3 = _slicedToArray(_ref2, 2),\n    visibleViews = _ref3[0],\n    setVisibleViews = _ref3[1];\n  var _ref4 = (0, $8D3nr$useState)(new (0, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec)()),\n    _ref5 = _slicedToArray(_ref4, 2),\n    contentSize = _ref5[0],\n    setContentSize = _ref5[1];\n  var _ref6 = (0, $8D3nr$useState)(false),\n    _ref7 = _slicedToArray(_ref6, 2),\n    isAnimating = _ref7[0],\n    setAnimating = _ref7[1];\n  var _ref8 = (0, $8D3nr$useState)(false),\n    _ref9 = _slicedToArray(_ref8, 2),\n    isScrolling = _ref9[0],\n    setScrolling = _ref9[1];\n  var virtualizer = (0, $8D3nr$useMemo)(function () {\n    return new (0, $38b9490c1cca8fc4$export$89be5a243e59c4b2)();\n  }, []);\n  virtualizer.delegate = {\n    setVisibleViews: setVisibleViews,\n    setVisibleRect: function setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize: setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: function beginAnimations() {\n      return setAnimating(true);\n    },\n    endAnimations: function endAnimations() {\n      return setAnimating(false);\n    },\n    getScrollAnchor: opts.getScrollAnchor\n  };\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n  (0, $8D3nr$useLayoutEffect)(function () {\n    virtualizer.afterRender();\n  });\n  // eslint-disable-next-line arrow-body-style\n  (0, $8D3nr$useEffect)(function () {\n    return function () {\n      return virtualizer.willUnmount();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var setVisibleRect = (0, $8D3nr$useCallback)(function (rect) {\n    virtualizer.visibleRect = rect;\n  }, [virtualizer]);\n  var startScrolling = (0, $8D3nr$useCallback)(function () {\n    virtualizer.startScrolling();\n    setScrolling(true);\n  }, [virtualizer]);\n  var endScrolling = (0, $8D3nr$useCallback)(function () {\n    virtualizer.endScrolling();\n    setScrolling(false);\n  }, [virtualizer]);\n  var state = (0, $8D3nr$useMemo)(function () {\n    return {\n      virtualizer: virtualizer,\n      visibleViews: visibleViews,\n      setVisibleRect: setVisibleRect,\n      contentSize: contentSize,\n      isAnimating: isAnimating,\n      isScrolling: isScrolling,\n      startScrolling: startScrolling,\n      endScrolling: endScrolling\n    };\n  }, [virtualizer, visibleViews, setVisibleRect, contentSize, isAnimating, isScrolling, startScrolling, endScrolling]);\n  return state;\n}\nexport { $c74cda7d31af1253$export$c84671f46d6a1ca as Layout, $d7fd61009c21d0bb$export$7e0eeb9da702a085 as LayoutInfo, $3041db3296945e6e$export$baf26146a414f24a as Point, $60423f92c7f9ad87$export$c79fc6492f3af13d as Rect, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec as Size, $ad1d98aa8f0c31b4$export$1a5223887c560441 as ReusableView, $fc0b13b484ac1194$export$1505db82fe357e65 as useVirtualizerState };","map":null,"metadata":{},"sourceType":"module"}