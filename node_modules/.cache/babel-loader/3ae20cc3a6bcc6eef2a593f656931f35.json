{"ast":null,"code":"import _slicedToArray from \"F:\\\\Ecommerce_recommendation_system\\\\Ecom_rec_system\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState as $6imuh$useState, useRef as $6imuh$useRef, useCallback as $6imuh$useCallback } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\nfunction $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {\n  var _ref = (0, $6imuh$useState)(value || defaultValue),\n    _ref2 = _slicedToArray(_ref, 2),\n    stateValue = _ref2[0],\n    setStateValue = _ref2[1];\n  var ref = (0, $6imuh$useRef)(value !== undefined);\n  var wasControlled = ref.current;\n  var isControlled = value !== undefined;\n  // Internal state reference for useCallback\n  var stateRef = (0, $6imuh$useRef)(stateValue);\n  if (wasControlled !== isControlled) console.warn(\"WARN: A component changed from \".concat(wasControlled ? \"controlled\" : \"uncontrolled\", \" to \").concat(isControlled ? \"controlled\" : \"uncontrolled\", \".\"));\n  ref.current = isControlled;\n  var setValue = (0, $6imuh$useCallback)(function (value) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    var onChangeCaller = function onChangeCaller(value) {\n      if (onChange) {\n        for (var _len2 = arguments.length, onChangeArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          onChangeArgs[_key2 - 1] = arguments[_key2];\n        }\n        if (!Object.is(stateRef.current, value)) onChange.apply(void 0, [value].concat(onChangeArgs));\n      }\n      if (!isControlled) stateRef.current = value;\n    };\n    if (typeof value === \"function\") {\n      console.warn(\"We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320\");\n      // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates\n      // when someone using useControlledState calls setControlledState(myFunc)\n      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc\n      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning\n      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same\n      var updateFunction = function updateFunction(oldValue) {\n        for (var _len3 = arguments.length, functionArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          functionArgs[_key3 - 1] = arguments[_key3];\n        }\n        var interceptedValue = value.apply(void 0, [isControlled ? stateRef.current : oldValue].concat(functionArgs));\n        onChangeCaller.apply(void 0, [interceptedValue].concat(args));\n        if (!isControlled) return interceptedValue;\n        return oldValue;\n      };\n      setStateValue(updateFunction);\n    } else {\n      if (!isControlled) setStateValue(value);\n      onChangeCaller.apply(void 0, [value].concat(args));\n    }\n  }, [isControlled, onChange]);\n  // If a controlled component's value prop changes, we need to update stateRef\n  if (isControlled) stateRef.current = value;else value = stateValue;\n  return [value, setValue];\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /**\n    * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.\n    */\nfunction $9446cca9a3875146$export$7d15b64cf5a3a4c4(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  var newValue = Math.min(Math.max(value, min), max);\n  return newValue;\n}\nfunction $9446cca9a3875146$export$cb6e0bb50bc19463(value, min, max, step) {\n  var remainder = (value - (isNaN(min) ? 0 : min)) % step;\n  var snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;\n  if (!isNaN(min)) {\n    if (snappedValue < min) snappedValue = min;else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor((max - min) / step) * step;\n  } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor(max / step) * step;\n  // correct floating point behavior by rounding to step precision\n  var string = step.toString();\n  var index = string.indexOf(\".\");\n  var precision = index >= 0 ? string.length - index : 0;\n  if (precision > 0) {\n    var pow = Math.pow(10, precision);\n    snappedValue = Math.round(snappedValue * pow) / pow;\n  }\n  return snappedValue;\n}\nfunction $9446cca9a3875146$export$b6268554fba451f(value, digits) {\n  var base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  var pow = Math.pow(base, digits);\n  return Math.round(value * pow) / pow;\n}\nexport { $458b0a5536c1a7cf$export$40bfa8c7b0832715 as useControlledState, $9446cca9a3875146$export$7d15b64cf5a3a4c4 as clamp, $9446cca9a3875146$export$cb6e0bb50bc19463 as snapValueToStep, $9446cca9a3875146$export$b6268554fba451f as toFixedNumber };","map":null,"metadata":{},"sourceType":"module"}