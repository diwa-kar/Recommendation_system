{"ast":null,"code":"import _slicedToArray from \"F:\\\\Ecommerce_recommendation_system\\\\Ecom_rec_system\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useControlledState as $bOkae$useControlledState } from \"@react-stately/utils\";\nfunction $3017fa7ffdddec74$export$8042c6c013fd5226() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var isReadOnly = props.isReadOnly; // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  var _$bOkae$useControlled = $bOkae$useControlledState(props.isSelected, props.defaultSelected || false, props.onChange),\n    _$bOkae$useControlled2 = _slicedToArray(_$bOkae$useControlled, 2),\n    isSelected = _$bOkae$useControlled2[0],\n    setSelected = _$bOkae$useControlled2[1];\n  function updateSelected(value) {\n    if (!isReadOnly) setSelected(value);\n  }\n  function toggleState() {\n    if (!isReadOnly) setSelected(!isSelected);\n  }\n  return {\n    isSelected: isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\nexport { $3017fa7ffdddec74$export$8042c6c013fd5226 as useToggleState };","map":null,"metadata":{},"sourceType":"module"}